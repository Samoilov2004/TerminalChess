import os
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º 'src' –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from localization import LocalizationManager
from game_vs_stockfish import GameVsStockfish, WHITE, BLACK, board_to_fen
from game_with_hints import GameWithHints
from Board import Board

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
USER_DATA_DIR = "user_data"
SETTINGS_FILE = os.path.join(USER_DATA_DIR, "settings.json")
SAVED_GAME_FILE = os.path.join(USER_DATA_DIR, "saved_game.json")

def ensure_user_data_dir():
    if not os.path.exists(USER_DATA_DIR):
        os.makedirs(USER_DATA_DIR)

def save_config(config: dict, lang: str):
    ensure_user_data_dir()
    data = {"language": lang, "config": config}
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

def load_config() -> tuple:
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        default_config, _ = get_default_config()
        loaded_config = data.get("config", {})
        default_config.update(loaded_config)
        return default_config, data.get("language")
    except (FileNotFoundError, json.JSONDecodeError):
        default_config, _ = get_default_config()
        return default_config, None

def get_default_config() -> tuple:
    config = {
        'highlighting': True, 'flip_board': True,
        'piece_set': 'unicode', 'board_style': 'classic'
    }
    lang = "ru"
    return config, lang

def save_game_state(game):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –≤ JSON —Ñ–∞–π–ª."""
    ensure_user_data_dir()
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
    state = {
        "game_type": game.__class__.__name__,
        "player_color": game.player_color,
        "skill_level": game.engine.skill_level if hasattr(game.engine, 'skill_level') else 5,
        "lang": game.localizer.lang,
        "fen": board_to_fen(game.board) # –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
    }
    with open(SAVED_GAME_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=4)
    print(game.localizer.get("game_saved_message"))

def continue_game(config: dict, localizer: LocalizationManager):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ start_game_instance."""
    if not os.path.exists(SAVED_GAME_FILE):
        print(localizer.get("no_saved_game"))
        input(localizer.get("press_enter_to_continue"))
        return

    try:
        with open(SAVED_GAME_FILE, 'r', encoding='utf-8') as f:
            state = json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        if os.path.exists(SAVED_GAME_FILE):
            os.remove(SAVED_GAME_FILE) # –£–¥–∞–ª—è–µ–º –±–∏—Ç—ã–π —Ñ–∞–π–ª
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏)
    game_class = GameVsStockfish if state.get('game_type') == 'GameVsStockfish' else GameWithHints
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    game = game_class(
        player_color=state['player_color'],
        skill_level=state['skill_level'],
        lang=state['lang']
    )
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    game.render_config = config
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –¥–æ—Å–∫–µ –∏–∑ FEN-—Å—Ç—Ä–æ–∫–∏
    game.board.load_from_fen(state['fen'])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    start_game_instance(game, localizer)

def start_game_instance(game_instance, localizer: LocalizationManager):
    game_active = True
    try:
        while game_instance.board.get_game_status() == 'in_progress' and game_active:
            game_instance.renderer.draw_board(game_instance.board, game_instance.last_move)
            if game_instance.board.color_to_move == game_instance.player_color:
                game_active = game_instance._player_turn() # Correctly calls the overridden method.
            else:
                game_instance._ai_turn()
        
        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã (–º–∞—Ç, –ø–∞—Ç, –Ω–∏—á—å—è), —É–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if game_active and os.path.exists(SAVED_GAME_FILE):
            os.remove(SAVED_GAME_FILE)

    except Exception:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
        game_instance.engine.close()
        raise # –∏ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–µ –≤ –∫–æ–Ω—Å–æ–ª–∏

    finally:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞
        if not game_active: # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –≤—ã–π—Ç–∏ (game_active —Å—Ç–∞–ª–æ False)
            save_game_state(game_instance)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        game_instance.engine.close()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–æ—Å–∫—É
        game_instance.renderer.draw_board(game_instance.board)
        input(localizer.get("press_enter_to_continue"))

def start_new_game(game_class, localizer: LocalizationManager, config: dict):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã, —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
    """
    player_color, skill_level = get_game_settings(localizer)
    game = game_class(
        player_color=player_color,
        skill_level=skill_level,
        lang=localizer.lang
    )
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    game.render_config = config
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    start_game_instance(game, localizer)


def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_welcome():
    clear_screen()
    print("*" * 40 + "\n*                                      *\n*         –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í           *\n*         –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–´–ï –®–ê–•–ú–ê–¢–´         *\n*                                      *\n" + "*" * 40 + "\n\nWelcome to Terminal Chess!\n")

def select_language(initial_run=True):
    if not initial_run:
        print("\n" + ("-" * 20))
        print("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ / Change language:")
    print("  1. –†—É—Å—Å–∫–∏–π üá∑üá∫\n  2. English üá¨üáß/üá∫üá∏\n  3. Espa√±ol üá™üá∏\n  4. Fran√ßais üá´üá∑\n  5. ‰∏≠Êñá üá®üá≥")
    while True:
        choice = input(">> ").strip()
        if choice in ['1', '2', '3', '4', '5']:
            return {'1': 'ru', '2': 'en', '3': 'es', '4': 'fr', '5': 'zh'}[choice]

def get_game_settings(localizer: LocalizationManager):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∏–≥—Ä–æ–∫–∞ —Ü–≤–µ—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ò–ò."""
    clear_screen()
    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    while True:
        prompt = localizer.get("choose_color_prompt")
        choice = input(prompt).strip().lower()
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (w/b, –±/—á, n/b –∏ —Ç.–¥.)
        if choice in ['w', 'b', '–±', '—á', 'w', 'n', 'b', 'n', 'ÁôΩ', 'Èªë']:
            player_color = BLACK if choice in ['b', '—á', 'n', 'Èªë'] else WHITE
            break
        else:
            print(localizer.get("invalid_menu_choice"))

    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    while True:
        try:
            prompt = localizer.get("choose_skill_level")
            skill = int(input(prompt).strip())
            if 0 <= skill <= 20: 
                break
            else:
                print(localizer.get("invalid_menu_choice"))
        except ValueError:
            print(localizer.get("invalid_menu_choice"))
            
    return player_color, skill


# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö ---
def show_settings(localizer: LocalizationManager, config: dict) -> tuple:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (localizer, config)."""
    while True:
        clear_screen()
        print(f"--- {localizer.get('settings_menu_title')} ---")

        highlight_status = localizer.get('status_on') if config.get('highlighting', True) else localizer.get('status_off')
        flip_status = localizer.get('status_on') if config.get('flip_board', True) else localizer.get('status_off')
        
        piece_style_key = 'piece_style_unicode' if config.get('piece_set') == 'unicode' else 'piece_style_ascii'
        piece_style = localizer.get(piece_style_key)

        board_style_key = 'board_style_pretty' if config.get('board_style') == 'pretty' else 'board_style_classic'
        board_style = localizer.get(board_style_key)

        # –í—ã–≤–æ–¥–∏–º –æ–ø—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        print(f"1. {localizer.get('settings_option_language')}")
        print(f"2. {localizer.get('settings_option_highlight', status=highlight_status)}")
        print(f"3. {localizer.get('settings_option_flip', status=flip_status)}")
        print(f"4. {localizer.get('settings_option_pieces', style=piece_style)}")
        print(f"5. {localizer.get('settings_option_board_style', style=board_style)}")
        print(f"6. {localizer.get('settings_option_future1')}")
        print(f"7. {localizer.get('settings_option_future2')}")
        print(f"8. {localizer.get('settings_option_back')}")
        
        print("\n" + ("-"*25))
        print(localizer.get("author_credits"))
        print("-" * 25)

        choice = input(">> ").strip()

        if choice == '1':
            lang_code = select_language(initial_run=False)
            localizer = LocalizationManager(lang=lang_code)
        elif choice == '2':
            config['highlighting'] = not config.get('highlighting', True)
        elif choice == '3':
            config['flip_board'] = not config.get('flip_board', True)
        elif choice == '4':
            config['piece_set'] = 'ascii' if config.get('piece_set') == 'unicode' else 'unicode'
        elif choice == '5':
             config['board_style'] = 'pretty' if config.get('board_style') == 'classic' else 'classic'
        elif choice == '6' or choice == '7':
            input(f"\n{localizer.get('dev_notice')}")
        elif choice == '8':
            break # –í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        else:
            print(localizer.get("invalid_settings_choice"))
            input()

    return localizer, config
# --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò ---


def main_menu(localizer: LocalizationManager, config: dict):
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é."""
    while True:
        clear_screen()
        print(f"--- {localizer.get('main_menu_title')} ---")
        if os.path.exists(SAVED_GAME_FILE):
             print(localizer.get('menu_option_continue'))
        print(localizer.get('menu_option_standard'))
        print(localizer.get('menu_option_hints'))
        print(localizer.get('menu_option_settings'))
        print(localizer.get('menu_option_quit'))
        print("-" * (len(localizer.get('main_menu_title')) + 6))
        
        choice = input(">> ").strip()
        if choice == '0' and os.path.exists(SAVED_GAME_FILE):
            continue_game(config, localizer)
        elif choice == '1':
            start_new_game(GameVsStockfish, localizer, config)
        elif choice == '2':
            start_new_game(GameWithHints, localizer, config)
        elif choice == '3':
            localizer, config = show_settings(localizer, config)
            save_config(config, localizer.lang)
        elif choice == '4':
            break
        else:
            print(localizer.get("invalid_menu_choice"))
            input()

if __name__ == "__main__":
    ensure_user_data_dir()
    config, lang_code = load_config()

    if lang_code is None:
        print_welcome()
        lang_code = select_language()
        save_config(config, lang_code)

    localizer = LocalizationManager(lang=lang_code)
    
    main_menu(localizer, config)
    clear_screen()